<?xml version="1.0" encoding="UTF-8"?>
<!-- 官方推荐；以logback记录日志；log4j作者所出，替换log4j用 -->
<configuration scan="false">

    <!-- 路径不能使用相对路径，注意windows和linux上不一样 -->
    <!--   <property name="LOG_FILE_PATH" value="D:/userlog"/>    -->
        <property name="LOG_FILE_PATH" value="/Users/qian/logs/quartz-mapstruct-log-demo"/>
    <!--  ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑注意此处的路径需要修改哦↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑  -->


    <!-- 属性配置 -->
    <property name="ROOT_LOG_LEVEL" value="INFO"/>
    <property name="APPENDER_NAME_FILE" value="FILE"/>
    <property name="APPENDER_NAME_ERROR" value="ERROR"/>
    <property name="APPENFER_NAME_CONSOLE" value="CONSOLE"/>

    <!-- 彩色日志 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别 从左显示5个字符宽度  %msg：日志消息，%n是换行符 -->
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSSS}|%p|%logger|%M[%C:%L]|%msg %n"/>
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){red} %clr(${LOG_LEVEL_PATTERN:-%p}) %clr(%logger){cyan} %clr(%method[%C:%L] - ){magenta} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 禁用logback自身日志输出 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

    <!-- 输出到控制台的日志的格式以及使用的字符集 -->
    <appender name="${APPENFER_NAME_CONSOLE}" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志文件分隔保存的策略：基于大小和日期的方式分隔；日志的格式以及使用的字符集 -->
    <appender name="SYSTEM_LOGGER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <file>${LOG_FILE_PATH}/system.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名的格式以及归档的分隔方式 -->
            <FileNamePattern>${LOG_FILE_PATH}/back/system.log.%d{yyyy.MM.dd.HH}.%i.zip</FileNamePattern>
            <!-- 日志文件保留的最大天数，只能是整数 -->
            <MaxHistory>168</MaxHistory>
            <!-- 单个日志的最大容量 ，超出的话会压缩并重新创建日志文件  -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <appender name="APPLICATION_LOGGER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <file>${LOG_FILE_PATH}/application.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名的格式以及归档的分隔方式 -->
            <FileNamePattern>${LOG_FILE_PATH}/back/application.log.%d{yyyy.MM.dd.HH}.%i.zip</FileNamePattern>
            <!-- 日志文件保留的最大天数，只能是整数 -->
            <MaxHistory>168</MaxHistory>
            <!-- 单个日志的最大容量 ，超出的话会压缩并重新创建日志文件  -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

<!--    &lt;!&ndash; 错误日志文件 &ndash;&gt;-->
<!--    <appender name="${APPENDER_NAME_ERROR}" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <encoder>-->
<!--            <pattern>${FILE_LOG_PATTERN}</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--        <file>${LOG_FILE_PATH}/exception.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 日志文件输出的文件名的格式以及归档的分隔方式 &ndash;&gt;-->
<!--            <FileNamePattern>${LOG_FILE_PATH}/back-error/%d{yyyy.MM.dd.HH}.%i.log.zip</FileNamePattern>-->
<!--            &lt;!&ndash; 日志文件保留的最大天数，只能是整数 &ndash;&gt;-->
<!--            <MaxHistory>168</MaxHistory>-->
<!--            &lt;!&ndash; 单个日志的最大容量 ，超出的话会压缩并重新创建日志文件  &ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>20MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--        </rollingPolicy>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

    <!-- 异步写日志 -->
    <appender name="ASYNC_SYSTEM" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>1024</queueSize>
        <appender-ref ref ="SYSTEM_LOGGER"/>
    </appender>
    <appender name="ASYNC_APPLICATION" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>1024</queueSize>
        <appender-ref ref ="APPLICATION_LOGGER"/>
    </appender>

    <logger name="APPLICATION" level="info">
        <appender-ref ref="APPLICATION_LOGGER"/>
    </logger>

    <logger name="SYSTEM" level="info">
        <appender-ref ref="APPLICATION_LOGGER"/>
    </logger>

    <logger name="BIZ" level="info">
        <appender-ref ref="APPLICATION_LOGGER"/>
    </logger>

    <!-- 不同环境的日志级别配置  精确到包 -->
    <!--<springProfile name="local">-->
    <!--<logger name="io.geekidea.springbootplus" level="DEBUG"/>-->
    <!--</springProfile>-->

    <!-- 日志级别 -->
    <root level="${ROOT_LOG_LEVEL}">
        <appender-ref ref="${APPENFER_NAME_CONSOLE}"/>
        <appender-ref ref="ASYNC_SYSTEM" />
    </root>

</configuration>